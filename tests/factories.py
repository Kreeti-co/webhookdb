from datetime import datetime, timedelta
import factory
from factory.fuzzy import FuzzyText, FuzzyInteger, FuzzyChoice, FuzzyNaiveDateTime
from factory.alchemy import SQLAlchemyModelFactory
from webhookdb import db
from webhookdb.models import (
    User, Repository, UserRepoAssociation, RepositoryHook, Milestone,
    PullRequest, PullRequestFile, IssueLabel, Issue
)

class BaseFactory(SQLAlchemyModelFactory):
    class Meta(object):
        abstract = True
        sqlalchemy_session = db.session

now = datetime.utcnow()
yesterday = datetime.utcnow() - timedelta(days=1)
week_ago = datetime.utcnow() - timedelta(days=7)


class UserFactory(BaseFactory):
    id = FuzzyInteger(999999)
    login = FuzzyText(length=8)
    site_admin = False
    name = FuzzyText(length=16)
    company = "GitHub"
    email = "fake@example.com"
    hireable = False
    bio = FuzzyText(prefix="autogenerated: ", length=50)
    public_repos_count = FuzzyInteger(50)
    public_gists_count = FuzzyInteger(50)
    followers_count = FuzzyInteger(50)
    following_count = FuzzyInteger(50)
    created_at = FuzzyNaiveDateTime(start_dt=week_ago, end_dt=yesterday)
    updated_at = FuzzyNaiveDateTime(start_dt=yesterday, end_dt=now)

    class Meta(object):
        model = User


class RepoFactory(BaseFactory):
    id = FuzzyInteger(999999)
    name = FuzzyText(length=8)
    owner = factory.SubFactory(UserFactory)
    owner_login = factory.LazyAttribute(lambda repo: repo.owner.login)
    organization = factory.LazyAttribute(lambda repo: repo.owner)
    organization_login = factory.LazyAttribute(lambda repo: repo.organization.login)
    private = False
    description = FuzzyText(prefix="autogenerated: ", length=50)
    fork = False
    created_at = FuzzyNaiveDateTime(start_dt=week_ago, end_dt=yesterday)
    updated_at = FuzzyNaiveDateTime(start_dt=yesterday, end_dt=now)
    pushed_at = FuzzyNaiveDateTime(start_dt=yesterday, end_dt=now)
    size = FuzzyInteger(100, 1000000)
    stargazers_count = FuzzyInteger(50)
    watchers_count = FuzzyInteger(50)
    language = FuzzyChoice(["Python", "JavaScript", "Ruby", "Markdown"])
    has_issues = True
    has_downloads = True
    has_wiki = True
    has_pages = True
    forks_count = FuzzyInteger(50)
    open_issues_count = FuzzyInteger(100)
    default_branch = "master"

    class Meta(object):
        model = Repository


class MilestoneFactory(BaseFactory):
    repo = factory.SubFactory(RepoFactory)
    number = factory.Sequence(int)
    state = "open"
    title = factory.Sequence(lambda n: "v{}.0".format(n))
    description = FuzzyText(prefix="autogenerated: ", length=50)
    creator = factory.LazyAttribute(lambda m: m.repo.owner)
    creator_login = factory.LazyAttribute(lambda m: m.repo.owner_login)
    open_issues_count = FuzzyInteger(20)
    closed_issues_count = FuzzyInteger(20)
    created_at = FuzzyNaiveDateTime(start_dt=week_ago, end_dt=yesterday)
    updated_at = FuzzyNaiveDateTime(start_dt=yesterday, end_dt=now)
    closed_at = None
    due_at = None

    class Meta(object):
        model = Milestone


class PullRequestFactory(BaseFactory):
    id = FuzzyInteger(999999)
    number = factory.Sequence(int)
    state = "open"
    locked = False
    user = factory.SubFactory(UserFactory)
    user_login = factory.LazyAttribute(lambda pr: pr.user.login)
    title = factory.Sequence(lambda n: "PR #{}".format(n))
    body = FuzzyText(prefix="autogenerated: ", length=50)
    created_at = FuzzyNaiveDateTime(start_dt=week_ago, end_dt=yesterday)
    updated_at = FuzzyNaiveDateTime(start_dt=yesterday, end_dt=now)
    base_repo = factory.SubFactory(RepoFactory)
    base_ref = "master"
    head_repo = factory.SubFactory(RepoFactory)
    head_ref = FuzzyText(length=10)
    merged = False
    comments_count = FuzzyInteger(10)
    review_comments_count = FuzzyInteger(15)
    commits_count = FuzzyInteger(5)
    additions = FuzzyInteger(50)
    deletions = FuzzyInteger(50)
    changed_files = FuzzyInteger(20)

    class Meta(object):
        model = PullRequest
